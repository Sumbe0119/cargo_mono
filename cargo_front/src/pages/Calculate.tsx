import { useState, useMemo } from "react";
import CustomInput from "../components/shared/CustomInput";
import CalculateHeader from "../components/widget/calculate/CalculateHeader";

interface BoxDimensions {
  width: number;
  height: number;
  length: number;
  weight: number;
}

const WAREHOUSE = {
  kg: 3000,
  m3: 599,
  name: "–≠—Ä—ç—ç–Ω –∞–≥—É—É–ª–∞—Ö",
  rate: 399
}
const Calculate = () => {

  const [dimensions, setDimensions] = useState<BoxDimensions>({
    weight: 0,
    height: 0,
    length: 0,
    width: 0,
  });
  console.log("üöÄ ~ Calculate ~ dimensions:", dimensions)


  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  const handleChange = (field: keyof BoxDimensions, value: string) => {
    if (!/^\d*\.?\d*$/.test(value)) {
      setFormErrors((prev) => ({ ...prev, [field]: "–ó”©–≤—Ö”©–Ω —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É." }));
      return;
    }

    setDimensions((prev) => ({
      ...prev,
      [field]: value === "" ? 0 : Number(value),
    }));

    if (formErrors[field]) {
      setFormErrors((prev) => ({ ...prev, [field]: "" }));
    }
  };

  // –û–≤–æ—Ä—ã–Ω –∂–∏–Ω —Ç–æ–æ—Ü–æ–æ–ª–æ–ª
  const price = useMemo(() => {
    const volumeM3 =
      (dimensions.height / 100) *
      (dimensions.length / 100) *
      (dimensions.width / 100);
    const priceByKg = dimensions.weight * WAREHOUSE.kg;
    const priceByM3 = volumeM3 * (WAREHOUSE.m3 * WAREHOUSE.rate);

    // 100-—Ä“Ø“Ø –±“Ø—Ö—ç–ª–¥—ç–Ω—ç
    return Math.ceil(Math.max(priceByKg, priceByM3) / 100) * 100;
  }, [dimensions]);




  // –ú”©–Ω–≥”©–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
  const formattedPrice = useMemo(() => {
    return new Intl.NumberFormat("mn-MN").format(price);
  }, [price]);

  return (
    <div className="simple-container xs:px-4 lg:px-0 xs:space-y-3 lg:space-y-11 xs:mt-6 lg:mt-24">
      {/* –ê–≥—É—É–ª–∞—Ö —Å–æ–Ω–≥–æ—Ö —Ö—ç—Å—ç–≥ */}

      <CalculateHeader
        warehouse={WAREHOUSE}
        calculatePrice={formattedPrice}
      />

      <div className="grid gap-1">
        <div className="grid xs:grid-cols-1 lg:grid-cols-3 xs:gap-3 lg:gap-6">
          <CustomInput
            label="”®—Ä–≥”©–Ω"
            placeholder="”©—Ä–≥”©–Ω"
            value={dimensions.width}
            onChange={(e) => handleChange("width", e)}
            error={formErrors.width}
            showText
            inputMode="numeric"
            simpleText="cm"
          />
          <CustomInput
            label="”®–Ω–¥”©—Ä"
            placeholder="”©–Ω–¥”©—Ä"
            value={dimensions.height}
            onChange={(e) => handleChange("height", e)}
            error={formErrors.height}
            showText
            inputMode="numeric"
            simpleText="cm"
          />
          <CustomInput
            label="–£—Ä—Ç"
            placeholder="—É—Ä—Ç"
            value={dimensions.length}
            onChange={(e) => handleChange("length", e)}
            error={formErrors.length}
            showText
            inputMode="numeric"
            simpleText="cm"
          />
        </div>
        <CustomInput
          label="–ñ–∏–Ω"
          placeholder="–∂–∏–Ω"
          value={dimensions.weight}
          onChange={(e) => handleChange("weight", e)}
          error={formErrors.weight}
          showText
          inputMode="numeric"
          simpleText="kg"
        />
      </div>

      <div className="flex items-center justify-center w-full gap-3">
        <img alt="example_1" className="xs:h-[140px] lg:h-[200px] w-auto object-cover bg-cover" src="/cargo_1.png" />
        <img alt="example_2" className="xs:h-[140px] lg:h-[200px] w-auto object-cover bg-cover" src="/cargo_2.png" />
      </div>
      <div className="flex-col flex gap-5 items-start text-dark font-regular">
        <div className="grid gap-3 leading-none text-base text-black font-semibold">
          <p>–ë–∞—Ä–∞–∞–Ω—ã –æ–≤–æ—Ä</p>
          <span className="text-dark font-normal text-sm">
            (–£—Ä—Ç * ”®—Ä–≥”©–Ω * ”®–Ω–¥”©—Ä) / 1000000 * 1–º3 “Ø–Ω—ç–ª–≥—ç—ç
          </span>
        </div>
        <div className="grid gap-3 leading-none text-base text-black font-semibold">
          <p>–ë–∞—Ä–∞–∞–Ω—ã –∂–∏–Ω</p>
          <span className="text-dark font-normal text-sm">
            –ë–∞—Ä–∞–∞–Ω—ã –∂–∏–Ω * 1–∫–≥ “Ø–Ω—ç–ª–≥—ç—ç
          </span>
        </div>
        <div className="grid gap-3 leading-none text-base text-black font-semibold">
          <p>–¢—ç—ç–≤—Ä–∏–π–Ω –∑–∞—Ä–¥–∞–ª –±–æ–¥–æ—Ö –∞—Ä–≥–∞—á–ª–∞–ª</p>
          <ul className="text-dark font-normal text-sm list-disc pl-5 grid gap-2">
            <li>
              {" "}
              0-1–∫–≥ —Ö“Ø—Ä—Ç—ç–ª = 3,000 ‚ÇÆ –Ω—ç–º—ç–≥–¥—ç—Ö 1 –∫–≥ —Ç—É—Ç–∞–º–¥ 3,000 ‚ÇÆ, 1–º3 = 599¬•
            </li>
            <li>
              {" "}
              –¢—É—Å–¥–∞–∞ –∏—Ä—Å—ç–Ω –±–æ–ª–æ–Ω ”©”©—Ä –¥—ç–ª–≥“Ø“Ø—Ä–∏–π–Ω –±–∞—Ä–∞–∞–≥ —Ç—É—Å —Ç—É—Å–∞–¥ –Ω—å –±–æ–¥–Ω–æ
            </li>
            <li>
              {" "}
              –û–≤–æ—Ä –∏—Ö—Ç—ç–π —É—É—Ç—Ç–∞–π –∫—É—Ä—Ç–∏–∫, —Ö”©–Ω–∂–∏–ª –≥—ç—Ö –º—ç—Ç –∑“Ø–π–ª—Å –æ–≤–æ—Ä —Ö—ç–º–∂—ç—ç–Ω—ç—ç—Å—ç—ç
              —Ö–∞–º–∞–∞—Ä–∞–∞–¥ –æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä 5000‚ÇÆ-10000‚ÇÆ —Ö–æ–æ—Ä–æ–Ω–¥ –±–∞–π–¥–∞–≥.
            </li>
            <li>–ì—É—Ç–ª—ã–Ω —Ö–∞–π—Ä—Ü–∞–≥ 4000‚ÇÆ-8000‚ÇÆ —Ö–æ–æ—Ä–æ–Ω–¥</li>
          </ul>
        </div>
        <div className="grid gap-3 leading-none text-base text-black font-semibold">
          <p>–ñ–∏–Ω–≥—ç—ç—Ä –±–æ–¥–æ—Ö —É—É?, –æ–≤—Ä–æ–æ—Ä –±–æ–¥–æ—Ö —É—É?</p>
          <span className="text-dark font-normal text-sm">
            –¢–∞–Ω—ã –∑–∞—Ö–∏–∞–ª—Å–∞–Ω –±–∞—Ä–∞–∞ —Ö–∞—Ä—å—Ü–∞–Ω–≥—É–π —Ö“Ø–Ω–¥ –±–æ–ª–æ–≤—á –∂–∏–∂–∏–≥ —Ö—ç–º–∂—ç—ç—Ç—ç–π –±–æ–ª
            –∂–∏–Ω–≥—ç—ç—Ä —Ç—ç—ç–≤—Ä–∏–π–Ω –∑–∞—Ä–¥–ª—ã–≥ —Ç–æ–æ—Ü–æ–æ–ª–Ω–æ. (“Æ“Ø–Ω–∏–π–≥ —Ç”©–º”©—Ä —Ç—É—É—Ö–∞–π—Ç–∞–π –∑“Ø–π—Ä–ª—ç–∂
            –æ–π–ª–≥–æ–∂ –±–æ–ª–Ω–æ.) –•—ç—Ä—ç–≤ —Ç–∞–Ω—ã –±–∞—Ä–∞–∞ —Ö”©–Ω–≥”©–Ω –±–æ–ª–æ–≤—á –æ–≤–æ—Ä —Ö—ç–º–∂—ç—ç –Ω—å
            —Ö–∞—Ä—å—Ü–∞–Ω–≥—É–π —Ç–æ–º –±–∞–π–≤–∞–ª –æ–≤–æ—Ä —Ö—ç–º–∂—ç—ç–≥—ç—ç—Ä —Ç—ç—ç–≤—Ä–∏–π–Ω –∑–∞—Ä–¥–ª—ã–≥ –±–æ–¥–Ω–æ.
            (“Æ“Ø–Ω–∏–π–≥ —Ö”©–Ω–≥”©–Ω —É–Ω–∞–¥–∞–≥ –¥—É–≥—É–π—Ç–∞–π –∑“Ø–π—Ä–ª—ç–∂ –æ–π–ª–≥–æ–∂ –±–æ–ª–Ω–æ.)
          </span>
        </div>
      </div>
    </div>
  );
};

export default Calculate;
