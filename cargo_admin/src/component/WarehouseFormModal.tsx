import dayjs from 'dayjs'
import 'dayjs/locale/mn'
import dayLocaleData from 'dayjs/plugin/localeData'
import { Form, Input, Modal, notification, Skeleton } from 'antd'
import axios from 'axios'
import config, { requestHeader } from '../config'
import { errorHandler } from './Utilities'
import { useCallback, useEffect, useState } from 'react'
import TextArea from 'antd/es/input/TextArea'
import { WarehouseFieldType } from '../utils/commonTypes'

dayjs.locale('mn')
dayjs.extend(dayLocaleData)

interface ModalProps {
  title: string
  id?: number
  open: boolean
  onClose: () => void
  refetch: () => void
}

const WarehouseFormModal = ({ title, open, onClose, id, refetch }: ModalProps) => {

  const [loading, setLoading] = useState(false)
  const [form] = Form.useForm<WarehouseFieldType>()

  const fetchWarehouse = useCallback(async (id: number) => {
    setLoading(true)
    try {
      const { data } = await axios.get(
        `${config.get('API_BASE_URL')}/warehouse/${id}`,
        requestHeader,
      )
      form.setFieldsValue(data?.data)
    } catch (err) {
      errorHandler(err)
    } finally {
      setLoading(false)
    }
  }, [form])

  useEffect(() => {
    if (id) {
      fetchWarehouse(id)
    } else {
      form.resetFields()
    }
  }, [id, form])

  const handleSubmit = async () => {
    try {
      const payload = await form.validateFields()
      console.log("üöÄ ~ handleSubmit ~ values:", payload)

      // if (id) {
      //   await axios.put(
      //     `${config.get('API_BASE_URL')}/warehouse`,
      //     payload,
      //     requestHeader
      //   )
      // } else {
      //   await axios.post(
      //     `${config.get('API_BASE_URL')}/warehouse`,
      //     payload,
      //     requestHeader
      //   )
      // }

      // notification.success({ message: '–ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–ª–∞–∞' })
      // onClose()
      // refetch()
    } catch (err) {
      errorHandler(err)
    }
  }

  return (
    <Modal
      title={title}
      open={open}
      onOk={handleSubmit}
      closable
      onCancel={onClose}
      okText="–•–∞–¥–≥–∞–ª–∞—Ö"
      cancelText="–•–∞–∞—Ö"
    >
      {loading ? (
        <Skeleton />
      ) : (
        <Form form={form} layout="vertical">
          <Form.Item name="name" label="–ù—ç—Ä">
            <Input placeholder="Your warehouse name" />
          </Form.Item>
          <Form.Item name="address" label="–ê–≥—É—É–ª–∞—Ö—ã–Ω —Ö–∞—è–≥">
            <TextArea placeholder="–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö–∞—è–≥" autoSize={{ minRows: 2, maxRows: 5 }} />
          </Form.Item>
          <Form.Item name="region" label="–ë“Ø—Å –Ω—É—Ç–∞–≥">
            <Input placeholder="–ë“Ø—Å –Ω—É—Ç–∞–≥" />
          </Form.Item>

          <div className='flex items-center gap-2 w-full'>
            <Form.Item name={['contactInfo', 'phone']} label="–£—Ç–∞—Å">
              <Input placeholder="–£—Ç–∞—Å" />
            </Form.Item>
            <Form.Item name={['contactInfo', 'email']} label="–ò–º—ç–π–ª">
              <Input placeholder="–ò–º—ç–π–ª" />
            </Form.Item>
            <Form.Item name="type" label="–ê–≥—É—É–ª–∞—Ö—ã–Ω —Ç”©—Ä”©–ª">
              <Input placeholder="–≠–Ω–≥–∏–π–Ω / –®—É—É—Ä—Ö–∞–π" />
            </Form.Item>
          </div>

          <div className='flex gap-2'>
            <Form.Item name={['operatingHours', 'weekdays']} label="–ê–∂–ª—ã–Ω ”©–¥”©—Ä">
              <Input placeholder="–ê–∂–ª—ã–Ω ”©–¥”©—Ä" />
            </Form.Item>
            <Form.Item name={['operatingHours', 'weekends']} label="–ê–º—Ä–∞–ª—Ç—ã–Ω ”©–¥”©—Ä">
              <Input placeholder="–ê–º—Ä–∞–ª—Ç—ã–Ω ”©–¥”©—Ä" />
            </Form.Item>
            <Form.Item name="totalCapacity" label="–ë–∞—Ä–∞–∞–Ω—ã –±–∞–≥—Ç–∞–∞–º–∂">
              <Input placeholder="–ë–∞—Ä–∞–∞–Ω—ã –±–∞–≥—Ç–∞–∞–º–∂" />
            </Form.Item>
          </div>

          <div className='flex items-center gap-2'>
            <Form.Item name={['currency', 'kg']} label="–ö–≥ “Ø–Ω—ç">
              <Input placeholder="–ö–≥ “Ø–Ω—ç" />
            </Form.Item>
            <Form.Item name={['currency', 'm3']} label="–ú3 “Ø–Ω—ç–ª–≥—ç—ç">
              <Input placeholder="–ú3 “Ø–Ω—ç–ª–≥—ç—ç" />
            </Form.Item>
            <Form.Item name={['currency', 'rate']} label="–•–∞–Ω—à">
              <Input placeholder="–•–∞–Ω—à" />
            </Form.Item>
          </div>
        </Form>
      )}
    </Modal>
  )
}

export default WarehouseFormModal
